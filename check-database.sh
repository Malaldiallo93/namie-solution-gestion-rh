#!/bin/bash

# Script pour v√©rifier la base de donn√©es MySQL
# Auteur: Assistant IA

echo "üóÑÔ∏è  V√©rification de la base de donn√©es MySQL..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# V√©rifier si MySQL est install√©
if ! command -v mysql &> /dev/null; then
    echo -e "${RED}‚ùå MySQL n'est pas install√©${NC}"
    echo -e "${YELLOW}üí° Installez-le avec: brew install mysql${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ MySQL install√©: $(mysql --version)${NC}"

# Lire la configuration depuis .env
ENV_FILE="hr-backend/.env"

if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}‚ùå Fichier .env non trouv√©${NC}"
    echo -e "${YELLOW}üí° Ex√©cutez d'abord: ./configure-mysql.sh${NC}"
    exit 1
fi

# Extraire les param√®tres de connexion
DB_HOST=$(grep "^DB_HOST=" "$ENV_FILE" | cut -d'=' -f2)
DB_PORT=$(grep "^DB_PORT=" "$ENV_FILE" | cut -d'=' -f2)
DB_DATABASE=$(grep "^DB_DATABASE=" "$ENV_FILE" | cut -d'=' -f2)
DB_USERNAME=$(grep "^DB_USERNAME=" "$ENV_FILE" | cut -d'=' -f2)
DB_PASSWORD=$(grep "^DB_PASSWORD=" "$ENV_FILE" | cut -d'=' -f2)

echo -e "\n${BLUE}üìã Configuration d√©tect√©e:${NC}"
echo -e "   ${GREEN}H√¥te: $DB_HOST${NC}"
echo -e "   ${GREEN}Port: $DB_PORT${NC}"
echo -e "   ${GREEN}Base de donn√©es: $DB_DATABASE${NC}"
echo -e "   ${GREEN}Utilisateur: $DB_USERNAME${NC}"

# Tester la connexion MySQL
echo -e "\n${BLUE}üîç Test de connexion MySQL...${NC}"

if [ -z "$DB_PASSWORD" ]; then
    MYSQL_CMD="mysql -h $DB_HOST -P $DB_PORT -u $DB_USERNAME"
else
    MYSQL_CMD="mysql -h $DB_HOST -P $DB_PORT -u $DB_USERNAME -p$DB_PASSWORD"
fi

if $MYSQL_CMD -e "SELECT 1;" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Connexion MySQL r√©ussie${NC}"
else
    echo -e "${RED}‚ùå Impossible de se connecter √† MySQL${NC}"
    echo -e "${YELLOW}üí° V√©rifiez vos param√®tres de connexion${NC}"
    exit 1
fi

# V√©rifier si la base de donn√©es existe
echo -e "\n${BLUE}üîç V√©rification de la base de donn√©es...${NC}"

if $MYSQL_CMD -e "USE $DB_DATABASE;" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Base de donn√©es '$DB_DATABASE' existe${NC}"
else
    echo -e "${RED}‚ùå Base de donn√©es '$DB_DATABASE' n'existe pas${NC}"
    echo -e "${YELLOW}üí° Cr√©ez-la ou ex√©cutez: ./configure-mysql.sh${NC}"
    exit 1
fi

# Lister les tables
echo -e "\n${BLUE}üìä Tables dans la base de donn√©es:${NC}"

TABLES=$($MYSQL_CMD -e "SHOW TABLES FROM $DB_DATABASE;" 2>/dev/null | tail -n +2)

if [ -z "$TABLES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Aucune table trouv√©e${NC}"
    echo -e "${YELLOW}üí° Ex√©cutez les migrations: cd hr-backend && php artisan migrate${NC}"
else
    echo -e "${GREEN}‚úÖ Tables trouv√©es:${NC}"
    echo "$TABLES" | while read table; do
        echo -e "   ${GREEN}- $table${NC}"
    done
fi

# V√©rifier la connexion Laravel
echo -e "\n${BLUE}üîç Test de la connexion Laravel...${NC}"

cd hr-backend

if php artisan tinker --execute="DB::connection()->getPdo();" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Connexion Laravel √† MySQL r√©ussie${NC}"
else
    echo -e "${RED}‚ùå Erreur de connexion Laravel √† MySQL${NC}"
    echo -e "${YELLOW}üí° V√©rifiez la configuration dans .env${NC}"
    cd ..
    exit 1
fi

# V√©rifier le statut des migrations
echo -e "\n${BLUE}üîÑ Statut des migrations:${NC}"

MIGRATION_STATUS=$(php artisan migrate:status 2>/dev/null)

if echo "$MIGRATION_STATUS" | grep -q "No migrations found"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Aucune migration trouv√©e${NC}"
elif echo "$MIGRATION_STATUS" | grep -q "All migrations have been run"; then
    echo -e "${GREEN}‚úÖ Toutes les migrations sont √† jour${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Migrations en attente${NC}"
    echo "$MIGRATION_STATUS"
fi

cd ..

echo -e "\n${GREEN}üéâ V√©rification de la base de donn√©es termin√©e!${NC}" 