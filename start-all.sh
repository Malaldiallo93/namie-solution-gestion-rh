#!/bin/bash

# Script principal pour d√©marrer tout l'√©cosyst√®me HR Dashboard
# Auteur: Assistant IA

echo "üöÄ D√©marrage de l'√©cosyst√®me HR Dashboard complet..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction pour afficher un titre
print_title() {
    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${PURPLE}  $1${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# Fonction pour v√©rifier le statut d'un service
check_service() {
    local service_name=$1
    local url=$2
    
    if curl -s "$url" > /dev/null; then
        echo -e "${GREEN}‚úÖ $service_name: $url${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $service_name: Non accessible${NC}"
        return 1
    fi
}

# V√©rification des pr√©requis
print_title "V√âRIFICATION DES PR√âREQUIS"

echo -e "${BLUE}üîç V√©rification des outils n√©cessaires...${NC}"

# Node.js
if command -v node &> /dev/null; then
    echo -e "${GREEN}‚úÖ Node.js: $(node --version)${NC}"
else
    echo -e "${RED}‚ùå Node.js non install√©${NC}"
    exit 1
fi

# PHP
if command -v php &> /dev/null; then
    echo -e "${GREEN}‚úÖ PHP: $(php --version | head -1)${NC}"
else
    echo -e "${RED}‚ùå PHP non install√©${NC}"
    exit 1
fi

# Composer
if command -v composer &> /dev/null; then
    echo -e "${GREEN}‚úÖ Composer install√©${NC}"
else
    echo -e "${RED}‚ùå Composer non install√©${NC}"
    exit 1
fi

# V√©rifier MySQL
if command -v mysql &> /dev/null; then
    echo -e "${GREEN}‚úÖ MySQL install√©: $(mysql --version | head -1)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  MySQL non install√© - utilisez: brew install mysql${NC}"
fi

# Nginx
if command -v nginx &> /dev/null; then
    echo -e "${GREEN}‚úÖ Nginx: $(nginx -v 2>&1)${NC}"
else
    echo -e "${RED}‚ùå Nginx non install√©${NC}"
    exit 1
fi

# Arr√™t des services existants
print_title "ARR√äT DES SERVICES EXISTANTS"

echo -e "${BLUE}üõë Arr√™t des services existants...${NC}"

# Arr√™ter Nginx
if sudo nginx -s quit 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Nginx arr√™t√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Nginx n'√©tait pas en cours d'ex√©cution${NC}"
fi

# Arr√™ter les processus sur les ports
pids_5173=$(lsof -ti:5173 2>/dev/null)
if [ ! -z "$pids_5173" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t des processus sur le port 5173...${NC}"
    echo $pids_5173 | xargs kill -9
fi

pids_8000=$(lsof -ti:8000 2>/dev/null)
if [ ! -z "$pids_8000" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t des processus sur le port 8000...${NC}"
    echo $pids_8000 | xargs kill -9
fi

sleep 2

# D√©marrage des microservices
print_title "D√âMARRAGE DES MICROSERVICES"

echo -e "${BLUE}üì¶ D√©marrage du Frontend React...${NC}"
cd "$(dirname "$0")"
npm run dev > /dev/null 2>&1 &
FRONTEND_PID=$!
echo $FRONTEND_PID > .frontend.pid
echo -e "${GREEN}‚úÖ Frontend d√©marr√© (PID: $FRONTEND_PID)${NC}"

echo -e "${BLUE}üì¶ D√©marrage du Backend Laravel...${NC}"
cd hr-backend
php artisan serve --host=127.0.0.1 --port=8000 > /dev/null 2>&1 &
BACKEND_PID=$!
echo $BACKEND_PID > .backend.pid
echo -e "${GREEN}‚úÖ Backend d√©marr√© (PID: $BACKEND_PID)${NC}"

cd ..

# Attendre que les services d√©marrent
echo -e "\n${BLUE}‚è≥ Attente du d√©marrage des services...${NC}"
sleep 8

# D√©marrage de Nginx
print_title "D√âMARRAGE DE NGINX"

echo -e "${BLUE}üåê D√©marrage de Nginx...${NC}"
if sudo nginx; then
    echo -e "${GREEN}‚úÖ Nginx d√©marr√© avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors du d√©marrage de Nginx${NC}"
fi

# V√©rification finale
print_title "V√âRIFICATION FINALE"

echo -e "${BLUE}üìä V√©rification du statut des services...${NC}"

# V√©rifier les services
check_service "Frontend React" "http://localhost:5173"
check_service "Backend Laravel" "http://localhost:8000"
check_service "Nginx Reverse Proxy" "http://localhost:80"

# V√©rifier le health check
if curl -s http://localhost:80/health | grep -q "healthy"; then
    echo -e "${GREEN}‚úÖ Health check r√©ussi${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Health check √©chou√©${NC}"
fi

# R√©sum√© final
print_title "R√âSUM√â"

echo -e "${GREEN}üéâ √âcosyst√®me HR Dashboard d√©marr√© avec succ√®s!${NC}"
echo -e "\n${BLUE}üìã URLs d'acc√®s:${NC}"
echo -e "   ${GREEN}Application principale: http://localhost:80${NC}"
echo -e "   ${GREEN}Frontend React:        http://localhost:5173${NC}"
echo -e "   ${GREEN}Backend Laravel:       http://localhost:8000${NC}"
echo -e "   ${GREEN}Health check:          http://localhost:80/health${NC}"

echo -e "\n${BLUE}üîß Commandes utiles:${NC}"
echo -e "   ${YELLOW}Arr√™ter tout:          ./stop-all.sh${NC}"
echo -e "   ${YELLOW}Logs Nginx:            sudo tail -f /opt/homebrew/var/log/nginx/hr-dashboard-error.log${NC}"
echo -e "   ${YELLOW}Recharger Nginx:       sudo nginx -s reload${NC}"

echo -e "\n${PURPLE}‚ú® L'application est pr√™te √† √™tre utilis√©e!${NC}" 