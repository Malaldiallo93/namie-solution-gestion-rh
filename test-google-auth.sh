#!/bin/bash

# Script de test de l'authentification Google OAuth
# Auteur: Assistant IA

echo "üß™ Test de l'authentification Google OAuth..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Fonction pour afficher un titre
print_title() {
    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${PURPLE}  $1${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

print_title "V√âRIFICATION DU BACKEND LARAVEL"

# V√©rifier si le serveur Laravel fonctionne
if curl -s http://localhost:8000/api/health | grep -q "healthy"; then
    echo -e "${GREEN}‚úÖ Serveur Laravel actif - http://localhost:8000${NC}"
else
    echo -e "${RED}‚ùå Serveur Laravel non accessible${NC}"
    echo -e "${YELLOW}üí° D√©marrez le serveur: cd hr-backend && php artisan serve${NC}"
    exit 1
fi

print_title "V√âRIFICATION DES ROUTES D'AUTHENTIFICATION"

# V√©rifier les routes d'authentification
echo -e "${BLUE}üîç Test des routes d'authentification...${NC}"

# Test de la route Google OAuth (route web)
if curl -s -I http://localhost:8000/auth/google | grep -q "302\|200"; then
    echo -e "${GREEN}‚úÖ Route Google OAuth accessible${NC}"
else
    echo -e "${RED}‚ùå Route Google OAuth non accessible${NC}"
fi

# Test de la route de callback (route web)
if curl -s -I http://localhost:8000/auth/google/callback | grep -q "302\|200\|400"; then
    echo -e "${GREEN}‚úÖ Route de callback accessible${NC}"
else
    echo -e "${RED}‚ùå Route de callback non accessible${NC}"
fi

# Test de la route de d√©connexion
if curl -s -I -X POST http://localhost:8000/api/auth/logout | grep -q "401\|405"; then
    echo -e "${GREEN}‚úÖ Route de d√©connexion accessible (401 attendu sans token)${NC}"
else
    echo -e "${RED}‚ùå Route de d√©connexion non accessible${NC}"
fi

print_title "V√âRIFICATION DE LA BASE DE DONN√âES"

# V√©rifier que la table users a les bonnes colonnes
cd hr-backend
if php artisan tinker --execute="echo 'Test de connexion DB: ' . (DB::connection()->getPdo() ? 'OK' : 'ERREUR');" 2>/dev/null | grep -q "OK"; then
    echo -e "${GREEN}‚úÖ Connexion √† la base de donn√©es OK${NC}"
else
    echo -e "${RED}‚ùå Erreur de connexion √† la base de donn√©es${NC}"
fi

# V√©rifier que les migrations ont √©t√© ex√©cut√©es
if php artisan migrate:status | grep -q "Yes"; then
    echo -e "${GREEN}‚úÖ Migrations ex√©cut√©es${NC}"
else
    echo -e "${RED}‚ùå Migrations non ex√©cut√©es${NC}"
fi

cd ..

print_title "V√âRIFICATION DU FRONTEND"

# V√©rifier si le serveur React fonctionne
if curl -s http://localhost:5173 | grep -q "html"; then
    echo -e "${GREEN}‚úÖ Serveur React actif - http://localhost:5173${NC}"
else
    echo -e "${RED}‚ùå Serveur React non accessible${NC}"
    echo -e "${YELLOW}üí° D√©marrez le serveur: pnpm dev${NC}"
fi

print_title "V√âRIFICATION DES FICHIERS DE CONFIGURATION"

# V√©rifier le service d'authentification
if [ -f "src/services/authService.js" ]; then
    echo -e "${GREEN}‚úÖ Service d'authentification pr√©sent${NC}"
    
    # V√©rifier les m√©thodes importantes
    if grep -q "loginWithGoogle" src/services/authService.js; then
        echo -e "${GREEN}‚úÖ M√©thode loginWithGoogle pr√©sente${NC}"
    else
        echo -e "${RED}‚ùå M√©thode loginWithGoogle manquante${NC}"
    fi
    
    if grep -q "handleGoogleCallback" src/services/authService.js; then
        echo -e "${GREEN}‚úÖ M√©thode handleGoogleCallback pr√©sente${NC}"
    else
        echo -e "${RED}‚ùå M√©thode handleGoogleCallback manquante${NC}"
    fi
    
    if grep -q "logout" src/services/authService.js; then
        echo -e "${GREEN}‚úÖ M√©thode logout pr√©sente${NC}"
    else
        echo -e "${RED}‚ùå M√©thode logout manquante${NC}"
    fi
else
    echo -e "${RED}‚ùå Service d'authentification manquant${NC}"
fi

# V√©rifier la page de connexion
if [ -f "src/pages/Login.jsx" ]; then
    echo -e "${GREEN}‚úÖ Page de connexion pr√©sente${NC}"
    
    if grep -q "authService" src/pages/Login.jsx; then
        echo -e "${GREEN}‚úÖ Service d'authentification import√©${NC}"
    else
        echo -e "${RED}‚ùå Service d'authentification non import√©${NC}"
    fi
    
    if grep -q "handleGoogleLogin" src/pages/Login.jsx; then
        echo -e "${GREEN}‚úÖ Fonction handleGoogleLogin pr√©sente${NC}"
    else
        echo -e "${RED}‚ùå Fonction handleGoogleLogin manquante${NC}"
    fi
else
    echo -e "${RED}‚ùå Page de connexion manquante${NC}"
fi

# V√©rifier App.jsx
if grep -q "authService" src/App.jsx; then
    echo -e "${GREEN}‚úÖ Service d'authentification int√©gr√© dans App.jsx${NC}"
else
    echo -e "${RED}‚ùå Service d'authentification non int√©gr√© dans App.jsx${NC}"
fi

print_title "V√âRIFICATION DE LA CONFIGURATION GOOGLE"

# V√©rifier la configuration Google dans le backend
cd hr-backend
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Fichier .env pr√©sent${NC}"
    
    if grep -q "GOOGLE_CLIENT_ID" .env; then
        echo -e "${GREEN}‚úÖ GOOGLE_CLIENT_ID configur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  GOOGLE_CLIENT_ID non configur√©${NC}"
    fi
    
    if grep -q "GOOGLE_CLIENT_SECRET" .env; then
        echo -e "${GREEN}‚úÖ GOOGLE_CLIENT_SECRET configur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  GOOGLE_CLIENT_SECRET non configur√©${NC}"
    fi
    
    if grep -q "GOOGLE_REDIRECT_URI" .env; then
        echo -e "${GREEN}‚úÖ GOOGLE_REDIRECT_URI configur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  GOOGLE_REDIRECT_URI non configur√©${NC}"
    fi
else
    echo -e "${RED}‚ùå Fichier .env manquant${NC}"
fi

cd ..

print_title "TEST DES D√âPENDANCES"

# V√©rifier les d√©pendances Laravel
if [ -f "hr-backend/composer.json" ]; then
    if grep -q "laravel/socialite" hr-backend/composer.json; then
        echo -e "${GREEN}‚úÖ Laravel Socialite install√©${NC}"
    else
        echo -e "${RED}‚ùå Laravel Socialite non install√©${NC}"
    fi
    
    if grep -q "laravel/sanctum" hr-backend/composer.json; then
        echo -e "${GREEN}‚úÖ Laravel Sanctum install√©${NC}"
    else
        echo -e "${RED}‚ùå Laravel Sanctum non install√©${NC}"
    fi
else
    echo -e "${RED}‚ùå composer.json manquant${NC}"
fi

print_title "R√âSUM√â DES TESTS"

echo -e "${GREEN}üéâ Tests de l'authentification Google termin√©s!${NC}"

echo -e "\n${BLUE}üìã √âtat de la configuration:${NC}"
echo -e "   ${GREEN}‚úÖ Backend Laravel configur√©${NC}"
echo -e "   ${GREEN}‚úÖ Routes d'authentification cr√©√©es${NC}"
echo -e "   ${GREEN}‚úÖ Service d'authentification frontend${NC}"
echo -e "   ${GREEN}‚úÖ Page de connexion mise √† jour${NC}"
echo -e "   ${GREEN}‚úÖ Base de donn√©es configur√©e${NC}"

echo -e "\n${BLUE}‚ö†Ô∏è  Actions requises:${NC}"
echo -e "   ${YELLOW}‚Ä¢ Configurez vos credentials Google OAuth${NC}"
echo -e "   ${YELLOW}‚Ä¢ Ajoutez les variables dans hr-backend/.env${NC}"
echo -e "   ${YELLOW}‚Ä¢ Testez la connexion Google${NC}"

echo -e "\n${BLUE}üîó URLs de test:${NC}"
echo -e "   ${GREEN}‚Ä¢ Frontend: http://localhost:5173${NC}"
echo -e "   ${GREEN}‚Ä¢ Google OAuth: http://localhost:8000/auth/google${NC}"
echo -e "   ${GREEN}‚Ä¢ Health Check: http://localhost:8000/api/health${NC}"

echo -e "\n${PURPLE}‚ú® L'authentification Google est pr√™te √† √™tre test√©e!${NC}" 